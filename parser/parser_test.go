package parser

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"github.com/rajnikant12345/kmip_g/kmipbin"
	"testing"
)

/////////////// Create Destroy /////////////////////////////////


func TestParserCreate(t *testing.T) {
	b := bytes.Buffer{}
	d, _ := hex.DecodeString
	b.Write(d)
	Parser(&b)

}

func TestParserDelete(t *testing.T) {
	b := bytes.Buffer{}
	d, _ := hex.DecodeString("42007801000000804200770100000038420069010000002042006A0200000004000000010000000042006B0200000004000000020000000042000D0200000004000000010000000042000F010000003842005C050000000400000014000000004200790100000020420094070000001424554E495155455F4944454E5449464945525F3000000000")
	b.Write(d)
	Parser(&b)
}

//////////////////////case 2//////////////////////////////////////////////
func TestParserRegister(t *testing.T) {
	b := bytes.Buffer{}
	d, _ := hex.DecodeString
	b.Write(d)
	Parser(&b)
}

func TestParserRegisterCreate(t *testing.T) {
	b := bytes.Buffer{}
	d, _ := hex.DecodeString
	b.Write(d)
	Parser(&b)
}

//////////////////////

func TestDummy(t *testing.T) {
	b := bytes.Buffer{}
	d, _ := hex.DecodeString("42007801000001684200770100000038420069010000002042006A0200000004000000010000000042006B0200000004000000020000000042000D0200000004000000010000000042000F010000012042005C0500000004000000010000000042007901000001084200570500000004000000020000000042009101000000F0420008010000004042000A07000000044E616D650000000042000B0100000028420055070000000E54432D3331332D31322D6B657931000042005405000000040000000100000000420008010000003042000A070000001743727970746F6772617068696320416C676F726974686D0042000B05000000040000000200000000420008010000003042000A070000001443727970746F67726170686963204C656E6774680000000042000B0200000004000000A800000000420008010000003042000A070000001843727970746F67726170686963205573616765204D61736B42000B02000000040000000C00000000")
	b.Write(d)
	Parser(&b)
}



func TestParser_Marshal(t *testing.T) {

	k := &KmipStructResponse{}
	k.ResponseMessage = &ResponseMessage{}
	k.ResponseMessage.ResponseHeader = &ResponseHeader{}
	var kk kmipbin.KmipInt
	kk = kmipbin.KmipInt(7)
	k.ResponseMessage.ResponseHeader.BatchCount = &kk
	var gg = kmipbin.KmipByteString{0x40, 0x41, 0x40, 0x41, 0x40, 0x41}
	k.ResponseMessage.BatchItem = append(k.ResponseMessage.BatchItem, &BatchItem{UniqueBatchItemID: &gg})
	b := MarshalAllT(k)

	h := hex.EncodeToString(b)
	fmt.Println(h)

}
