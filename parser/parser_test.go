package parser

import (
	"bytes"
	"encoding/hex"
	"testing"
	"encoding/xml"
	"fmt"
	"strings"
)

/////////////// Create Destroy /////////////////////////////////


func TestPackUnpackRequest(t *testing.T) {
	d := []string{
		"42007801000001504200770100000038420069010000002042006A0200000004000000010000000042006B0200000004000000020000000042000D0200000004000000010000000042000F010000010842005C0500000004000000010000000042007901000000F04200570500000004000000020000000042009101000000D8420008010000003042000A070000001743727970746F6772617068696320416C676F726974686D0042000B05000000040000000300000000420008010000003042000A070000001443727970746F67726170686963204C656E6774680000000042000B02000000040000008000000000420008010000003042000A070000001843727970746F67726170686963205573616765204D61736B42000B02000000040000000C00000000420008010000002842000A0700000004782D49440000000042000B070000000954432D3331312D313200000000000000",
		//"42007801000000804200770100000038420069010000002042006A0200000004000000010000000042006B0200000004000000020000000042000D0200000004000000010000000042000F010000003842005C050000000400000014000000004200790100000020420094070000001424554E495155455F4944454E5449464945525F3000000000",
	//	"42007801000002384200770100000038420069010000002042006A0200000004000000010000000042006B0200000004000000020000000042000D0200000004000000010000000042000F01000001F042005C0500000004000000030000000042007901000001D8420057050000000400000006000000004200910100000080420008010000004842000A07000000044E616D650000000042000B0100000030420055070000001354432D3331322D31322D74656D706C61746531000000000042005405000000040000000100000000420008010000002842000A0700000004782D49440000000042000B070000000954432D3331322D3132000000000000004200900100000138420008010000002842000A070000000C4F626A6563742047726F75700000000042000B070000000647726F7570310000420008010000005842000A07000000204170706C69636174696F6E20537065636966696320496E666F726D6174696F6E42000B0100000028420003070000000373736C0000000000420002070000000F7777772E6578616D706C652E636F6D00420008010000003042000A0700000013436F6E7461637420496E666F726D6174696F6E000000000042000B07000000034A6F650000000000420008010000003042000A0700000009782D507572706F73650000000000000042000B070000000D64656D6F6E7374726174696F6E000000420008010000003042000A0700000004782D49440000000042000B070000001754432D3331322D31322D66726F6D2D74656D706C61746500",
	}

	for _, s := range d {
		b := bytes.Buffer{}
		d, _ := hex.DecodeString(s)
		b.Write(d)
		r := Parser(&b)
		x,_ := xml.MarshalIndent(r, "", "  ")
		fmt.Println(string(x))
		data := MarshalAllRequest(r)
		fmt.Println(hex.EncodeToString(data))
		fmt.Println(s)
		if strings.ToUpper(hex.EncodeToString(data)) != s {
			t.FailNow()
		}
	}
}

/*
func TestStringArray(t *testing.T) {
	k := &KmipStruct{}
	k.RequestMessage = &RequestMessage{}
	k.RequestMessage.RequestHeader = &RequestHeader{}
	var kk kmipbin.KmipInt
	kk = kmipbin.KmipInt(7)
	k.RequestMessage.RequestHeader.BatchCount = &kk
	bitem := &BatchItem{}
	bitem.RequestPayload = &RequestPayload{}

	//issuer1 := kmipbin.KmipTextString("123456")
	//issuer2 := kmipbin.KmipTextString("654321")

	//bitem.RequestPayload.Issuer = append(bitem.RequestPayload.Issuer , &issuer1 , &issuer2)


	k.RequestMessage.BatchItem = append(k.RequestMessage.BatchItem, bitem)


	b := MarshalAllRequest(k)

	h := hex.EncodeToString(b)
	fmt.Println(h)

	b1 := bytes.Buffer{}
	d, _ := hex.DecodeString(h)
	b1.Write(d)
	Parser(&b1)
}
*/


/*
func TestParser_Marshal(t *testing.T) {

	k := &KmipStructResponse{}
	k.ResponseMessage = &ResponseMessage{}
	k.ResponseMessage.ResponseHeader = &ResponseHeader{}
	var kk kmipbin.KmipInt
	kk = kmipbin.KmipInt(7)
	k.ResponseMessage.ResponseHeader.BatchCount = &kk
	var gg = kmipbin.KmipByteString{0x40, 0x41, 0x40, 0x41, 0x40, 0x41}
	k.ResponseMessage.BatchItem = append(k.ResponseMessage.BatchItem, &BatchItem{UniqueBatchItemID: &gg})
	b := MarshalAllT(k)

	h := hex.EncodeToString(b)
	fmt.Println(h)

}*/
